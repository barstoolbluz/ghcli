{
  "lockfile-version": 1,
  "manifest": {
    "version": 1,
    "install": {
      "bat": {
        "pkg-path": "bat"
      },
      "curl": {
        "pkg-path": "curl"
      },
      "gh": {
        "pkg-path": "gh"
      },
      "git": {
        "pkg-path": "git"
      },
      "gum": {
        "pkg-path": "gum"
      },
      "openssl": {
        "pkg-path": "openssl"
      }
    },
    "hook": {
      "on-activate": "# define paths\nCONFIG_FILE=\"${FLOX_ENV_CACHE:-$HOME/.cache/flox}/github_config\"\nENCRYPTED_TOKEN_FILE=\"${FLOX_ENV_CACHE:-$HOME/.cache/flox}/github_token.enc\"\nBASH_WRAPPER=\"${FLOX_ENV_CACHE:-$HOME/.cache/flox}/gh_wrapper.bash\"\nZSH_WRAPPER=\"${FLOX_ENV_CACHE:-$HOME/.cache/flox}/gh_wrapper.zsh\"\nFISH_WRAPPER=\"${FLOX_ENV_CACHE:-$HOME/.cache/flox}/gh_wrapper.fish\"\n\n# detect operating system\ndetect_os() {\n    if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n        echo \"macos\"\n    elif [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n        echo \"linux\"\n    else\n        echo \"unsupported\"\n    fi\n}\n\n# derive an encryption password from system information\nderive_password() {\n    # combine username, hostname and machine id for a unique but deterministic password\n    local user_info=\"$USER\"\n    local host_info=$(hostname)\n    local machine_id=\"\"\n    \n    if [[ -f \"/etc/machine-id\" ]]; then\n        machine_id=$(cat /etc/machine-id)\n    elif [[ -f \"/var/lib/dbus/machine-id\" ]]; then\n        machine_id=$(cat /var/lib/dbus/machine-id)\n    elif [[ \"$(detect_os)\" == \"macos\" ]]; then\n        machine_id=$(ioreg -rd1 -c IOPlatformExpertDevice | grep -E '(UUID)' | awk '{print $3}' | tr -d \\\")\n    fi\n    \n    # combine and hash the information\n    echo -n \"${user_info}${host_info}${machine_id}flox-github-token\" | openssl dgst -sha256 | awk '{print $2}'\n}\n\n# test if gh cli can directly authenticate with token\ntest_gh_direct_auth() {\n    local token=\"$1\"\n    local orig_token=\"\"\n    \n    # Backup any existing GITHUB_TOKEN\n    if [[ -n \"$GITHUB_TOKEN\" ]]; then\n        orig_token=\"$GITHUB_TOKEN\"\n    fi\n    \n    # Test with the new token\n    export GITHUB_TOKEN=\"$token\"\n    if gh auth status &>/dev/null; then\n        # Restore original token if any\n        if [[ -n \"$orig_token\" ]]; then\n            export GITHUB_TOKEN=\"$orig_token\"\n        else\n            unset GITHUB_TOKEN\n        fi\n        return 0\n    else\n        # Restore original token if any\n        if [[ -n \"$orig_token\" ]]; then\n            export GITHUB_TOKEN=\"$orig_token\"\n        else\n            unset GITHUB_TOKEN\n        fi\n        return 1\n    fi\n}\n\n# store token in system keyring\nstore_github_token() {\n    local token=\"$1\"\n    local os=$(detect_os)\n    \n    if [[ \"$os\" == \"macos\" ]]; then\n        if security add-generic-password -s \"flox-github\" -a \"$USER\" -w \"$token\" -U; then\n            # Test if gh works directly with the token\n            if test_gh_direct_auth \"$token\"; then\n                # No wrapper needed\n                mkdir -p \"$(dirname \"$CONFIG_FILE\")\"\n                echo \"GITHUB_TOKEN_STORED=true\" > \"$CONFIG_FILE\"\n                echo \"STORAGE_METHOD=keyring\" >> \"$CONFIG_FILE\"\n                echo \"NEEDS_WRAPPER=false\" >> \"$CONFIG_FILE\"\n                \n                # Configure github cli with the token\n                echo \"$token\" | gh auth login --with-token\n                \n                echo \"Token stored successfully in system keyring/keychain.\"\n                return 0\n            else\n                # Wrapper needed\n                mkdir -p \"$(dirname \"$CONFIG_FILE\")\"\n                echo \"GITHUB_TOKEN_STORED=true\" > \"$CONFIG_FILE\"\n                echo \"STORAGE_METHOD=keyring\" >> \"$CONFIG_FILE\"\n                echo \"NEEDS_WRAPPER=true\" >> \"$CONFIG_FILE\"\n                \n                echo \"Token stored successfully in system keyring/keychain.\"\n                return 0\n            fi\n        else\n            return 1\n        fi\n    elif [[ \"$os\" == \"linux\" ]]; then\n        if echo -n \"$token\" | secret-tool store --label=\"Flox GitHub Token\" service flox-github user \"$USER\"; then\n            # Test if gh works directly with the token\n            if test_gh_direct_auth \"$token\"; then\n                # No wrapper needed\n                mkdir -p \"$(dirname \"$CONFIG_FILE\")\"\n                echo \"GITHUB_TOKEN_STORED=true\" > \"$CONFIG_FILE\"\n                echo \"STORAGE_METHOD=keyring\" >> \"$CONFIG_FILE\"\n                echo \"NEEDS_WRAPPER=false\" >> \"$CONFIG_FILE\"\n                \n                # Configure github cli with the token\n                echo \"$token\" | gh auth login --with-token\n                \n                echo \"Token stored successfully in system keyring/keychain.\"\n                return 0\n            else\n                # Wrapper needed\n                mkdir -p \"$(dirname \"$CONFIG_FILE\")\"\n                echo \"GITHUB_TOKEN_STORED=true\" > \"$CONFIG_FILE\"\n                echo \"STORAGE_METHOD=keyring\" >> \"$CONFIG_FILE\"\n                echo \"NEEDS_WRAPPER=true\" >> \"$CONFIG_FILE\"\n                \n                echo \"Token stored successfully in system keyring/keychain.\"\n                return 0\n            fi\n        else\n            return 1\n        fi\n    else\n        echo \"Error: Unsupported operating system.\"\n        return 1\n    fi\n}\n\n# store token in encrypted file as fallback\nstore_github_token_encrypted() {\n    local token=\"$1\"\n    local password=$(derive_password)\n    \n    # create directory if it doesn't exist\n    mkdir -p \"$(dirname \"$ENCRYPTED_TOKEN_FILE\")\"\n    \n    # encrypt token with openssl\n    echo -n \"$token\" | openssl enc -aes-256-cbc -salt -pbkdf2 -pass pass:\"$password\" -out \"$ENCRYPTED_TOKEN_FILE\"\n    \n    # record that token has been stored in encrypted file\n    mkdir -p \"$(dirname \"$CONFIG_FILE\")\"\n    echo \"GITHUB_TOKEN_STORED=true\" > \"$CONFIG_FILE\"\n    echo \"STORAGE_METHOD=encrypted_file\" >> \"$CONFIG_FILE\"\n    echo \"NEEDS_WRAPPER=true\" >> \"$CONFIG_FILE\"\n    echo \"Token stored successfully in encrypted file.\"\n}\n\n# retrieve token from system keyring\nretrieve_github_token_keyring() {\n    local os=$(detect_os)\n    \n    if [[ \"$os\" == \"macos\" ]]; then\n        security find-generic-password -s \"flox-github\" -a \"$USER\" -w 2>/dev/null\n    elif [[ \"$os\" == \"linux\" ]]; then\n        secret-tool lookup service flox-github user \"$USER\" 2>/dev/null\n    fi\n}\n\n# retrieve token from encrypted file\nretrieve_github_token_encrypted() {\n    local password=$(derive_password)\n    \n    if [[ -f \"$ENCRYPTED_TOKEN_FILE\" ]]; then\n        openssl enc -aes-256-cbc -d -salt -pbkdf2 -pass pass:\"$password\" -in \"$ENCRYPTED_TOKEN_FILE\" 2>/dev/null\n        return $?\n    fi\n    return 1\n}\n\n# retrieve github token from appropriate storage\nretrieve_github_token() {\n    if [[ -f \"$CONFIG_FILE\" ]]; then\n        source \"$CONFIG_FILE\"\n        if [[ \"$STORAGE_METHOD\" == \"keyring\" ]]; then\n            retrieve_github_token_keyring\n        elif [[ \"$STORAGE_METHOD\" == \"encrypted_file\" ]]; then\n            retrieve_github_token_encrypted\n        fi\n    fi\n}\n\n# check if token exists\ntoken_exists() {\n    local token=$(retrieve_github_token)\n    [[ -n \"$token\" ]]\n}\n\n# validate github token with api\nvalidate_github_token() {\n    local token=\"$1\"\n    echo \"Validating GitHub token...\"\n    \n    # test token with a simple api request\n    local response=$(curl -s -o /dev/null -w \"%{http_code}\" -H \"Authorization: token $token\" https://api.github.com/user)\n    \n    if [[ \"$response\" == \"200\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n# check for existing token and validate\ncheck_existing_token() {\n    if [[ -f \"$CONFIG_FILE\" ]] && source \"$CONFIG_FILE\" && [[ \"$GITHUB_TOKEN_STORED\" == \"true\" ]]; then\n        # if no wrapper needed, verify with gh auth status\n        if [[ \"$NEEDS_WRAPPER\" == \"false\" ]]; then\n            if gh auth status &>/dev/null; then\n                return 0\n            else\n                echo \"GitHub integration was set up, but authentication is no longer working.\"\n                return 1\n            fi\n        else\n            # verify the token still works\n            local token=$(retrieve_github_token)\n            if [[ -n \"$token\" ]] && validate_github_token \"$token\"; then\n                # create shell wrappers if they don't exist but are needed\n                if [[ ! -f \"$BASH_WRAPPER\" ]]; then\n                    create_shell_wrappers\n                fi\n                return 0\n            else\n                echo \"Stored GitHub token is invalid or expired.\"\n                return 1\n            fi\n        fi\n    fi\n    return 1\n}\n\n# create wrappers for different shells\ncreate_shell_wrappers() {\n    # create bash/zsh wrapper\n    cat > \"$BASH_WRAPPER\" << 'BASH_EOF'\n# detect operating system\n_gh_wrapper_detect_os() {\n    if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n        echo \"macos\"\n    elif [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n        echo \"linux\"\n    else\n        echo \"unsupported\"\n    fi\n}\n\n# derive an encryption password from system information\n_gh_wrapper_derive_password() {\n    # combine username, hostname and machine id for a unique but deterministic password\n    local user_info=\"$USER\"\n    local host_info=$(hostname)\n    local machine_id=\"\"\n    \n    if [[ -f \"/etc/machine-id\" ]]; then\n        machine_id=$(cat /etc/machine-id)\n    elif [[ -f \"/var/lib/dbus/machine-id\" ]]; then\n        machine_id=$(cat /var/lib/dbus/machine-id)\n    elif [[ \"$(_gh_wrapper_detect_os)\" == \"macos\" ]]; then\n        machine_id=$(ioreg -rd1 -c IOPlatformExpertDevice | grep -E '(UUID)' | awk '{print $3}' | tr -d \\\")\n    fi\n    \n    # combine and hash the information\n    echo -n \"${user_info}${host_info}${machine_id}flox-github-token\" | openssl dgst -sha256 | awk '{print $2}'\n}\n\n# retrieve token from system keyring\n_gh_wrapper_retrieve_github_token_keyring() {\n    local os=$(_gh_wrapper_detect_os)\n    \n    if [[ \"$os\" == \"macos\" ]]; then\n        security find-generic-password -s \"flox-github\" -a \"$USER\" -w 2>/dev/null\n    elif [[ \"$os\" == \"linux\" ]]; then\n        secret-tool lookup service flox-github user \"$USER\" 2>/dev/null\n    fi\n}\n\n# retrieve token from encrypted file\n_gh_wrapper_retrieve_github_token_encrypted() {\n    local password=$(_gh_wrapper_derive_password)\n    local token_file=\"${FLOX_ENV_CACHE:-$HOME/.cache/flox}/github_token.enc\"\n    \n    if [[ -f \"$token_file\" ]]; then\n        openssl enc -aes-256-cbc -d -salt -pbkdf2 -pass pass:\"$password\" -in \"$token_file\" 2>/dev/null\n        return $?\n    fi\n    return 1\n}\n\n# retrieve github token\n_gh_wrapper_retrieve_github_token() {\n    local config_file=\"${FLOX_ENV_CACHE:-$HOME/.cache/flox}/github_config\"\n    \n    if [[ -f \"$config_file\" ]]; then\n        source \"$config_file\"\n        if [[ \"$STORAGE_METHOD\" == \"keyring\" ]]; then\n            _gh_wrapper_retrieve_github_token_keyring\n        elif [[ \"$STORAGE_METHOD\" == \"encrypted_file\" ]]; then\n            _gh_wrapper_retrieve_github_token_encrypted\n        fi\n    fi\n}\n\n# wrapper function for gh\ngh() {\n    local token=$(_gh_wrapper_retrieve_github_token)\n    if [[ -n \"$token\" ]]; then\n        GITHUB_TOKEN=\"$token\" command gh \"$@\"\n    else\n        echo \"Error: Unable to retrieve GitHub token. Please run 'flox activate' to set up GitHub integration.\"\n        return 1\n    fi\n}\nBASH_EOF\n\n    # Create copy for zsh (same content)\n    cp \"$BASH_WRAPPER\" \"$ZSH_WRAPPER\"\n    \n    # Create fish wrapper with a different heredoc delimiter\n    cat > \"$FISH_WRAPPER\" << 'FISH_EOF'\n# detect operating system\nfunction _gh_wrapper_detect_os\n    switch (uname)\n        case Darwin\n            echo \"macos\"\n        case Linux\n            echo \"linux\"\n        case '*'\n            echo \"unsupported\"\n    end\nend\n\n# derive an encryption password from system information\nfunction _gh_wrapper_derive_password\n    # combine username, hostname and machine id for a unique but deterministic password\n    set -l user_info $USER\n    set -l host_info (hostname)\n    set -l machine_id \"\"\n    \n    if test -f \"/etc/machine-id\"\n        set machine_id (cat /etc/machine-id)\n    else if test -f \"/var/lib/dbus/machine-id\"\n        set machine_id (cat /var/lib/dbus/machine-id)\n    else if test (_gh_wrapper_detect_os) = \"macos\"\n        set machine_id (ioreg -rd1 -c IOPlatformExpertDevice | grep -E '(UUID)' | awk '{print $3}' | tr -d \\\")\n    end\n    \n    # combine and hash the information\n    echo -n \"$user_info$host_info$machine_idflox-github-token\" | openssl dgst -sha256 | awk '{print $2}'\nend\n\n# retrieve token from system keyring\nfunction _gh_wrapper_retrieve_github_token_keyring\n    set -l os (_gh_wrapper_detect_os)\n    \n    if test $os = \"macos\"\n        security find-generic-password -s \"flox-github\" -a \"$USER\" -w 2>/dev/null\n    else if test $os = \"linux\"\n        secret-tool lookup service flox-github user \"$USER\" 2>/dev/null\n    end\nend\n\n# retrieve token from encrypted file\nfunction _gh_wrapper_retrieve_github_token_encrypted\n    set -l password (_gh_wrapper_derive_password)\n    set -l token_file \"$FLOX_ENV_CACHE/github_token.enc\"\n    test -z \"$FLOX_ENV_CACHE\"; and set token_file \"$HOME/.cache/flox/github_token.enc\"\n    \n    if test -f \"$token_file\"\n        openssl enc -aes-256-cbc -d -salt -pbkdf2 -pass pass:\"$password\" -in \"$token_file\" 2>/dev/null\n        return $status\n    end\n    return 1\nend\n\n# retrieve github token\nfunction _gh_wrapper_retrieve_github_token\n    set -l config_file \"$FLOX_ENV_CACHE/github_config\"\n    test -z \"$FLOX_ENV_CACHE\"; and set config_file \"$HOME/.cache/flox/github_config\"\n    \n    if test -f \"$config_file\"\n        set -l storage_method (grep \"STORAGE_METHOD\" \"$config_file\" | cut -d '=' -f2)\n        \n        if test \"$storage_method\" = \"keyring\"\n            _gh_wrapper_retrieve_github_token_keyring\n        else if test \"$storage_method\" = \"encrypted_file\"\n            _gh_wrapper_retrieve_github_token_encrypted\n        end\n    end\nend\n\n# wrapper function for gh\nfunction gh\n    set -l token (_gh_wrapper_retrieve_github_token)\n    if test -n \"$token\"\n        env GITHUB_TOKEN=\"$token\" command gh $argv\n    else\n        echo \"Error: Unable to retrieve GitHub token. Please run 'flox activate' to set up GitHub integration.\"\n        return 1\n    end\nend\nFISH_EOF\n}\n\n# wilkommen / bienvenue / witamy / welcome\nshow_welcome_message() {\n    gum style \\\n        --border rounded \\\n        --border-foreground 240 \\\n        --padding \"1 2\" \\\n        --margin \"1 0\" \\\n        --width 96 \\\n        \"$(gum style --foreground 141 --bold 'F l o x  GitHub CLI (More) Secure Local Auth Setup Wizard')\n\n👉  This wizard will guide you through setting up GitHub CLI (gh) authentication using\n    secure local storage:\n\n    1.  System keyring/keychain (preferred)\n    2.  Encrypted local file (fallback)\n\n👉  You will need to provide:\n\n    •  Your GitHub Personal Access Token with appropriate permissions\n\nYour token will be securely stored and used to authenticate GitHub CLI commands.\"\n\n    echo \"\"\n}\n\n# this explains how we create a token\nshow_token_instructions() {\n    gum style \\\n        --border rounded \\\n        --border-foreground 240 \\\n        --padding \"1 2\" \\\n        --margin \"1 0\" \\\n        --width 96 \\\n        \"$(gum style --foreground 141 --bold 'Creating a GitHub Personal Access Token')\n\n👉  To create a GitHub Personal Access Token:\n\n    1.  Go to $(gum style --foreground 212 --underline 'https://github.com/settings/tokens')\n    2.  Click 'Generate new token' (classic)\n    3.  Add a note like 'Flox CLI Integration'\n    4.  Select appropriate scopes:\n         •  $(gum style --foreground 212 'repo')\n         •  $(gum style --foreground 212 'read:org')\n    5.  Click 'Generate token'\n    6.  Copy the generated token\"\n\n    echo \"\"\n}\n\n# this is our completion message\nshow_completion_message() {\n    local storage_method=\"$1\"\n    local needs_wrapper=\"$2\"\n    \n    local wrapper_status=\"will use a wrapper\"\n    \n    if [[ \"$needs_wrapper\" == \"false\" ]]; then\n        wrapper_status=\"will authenticate directly\"\n    fi\n    \n    gum style \\\n        --border rounded \\\n        --border-foreground 240 \\\n        --padding \"1 2\" \\\n        --margin \"1 0\" \\\n        --width 96 \\\n        \"$(gum style --foreground 141 --bold 'F l o x  GitHub Integration Complete!')\n\n👉  Setup completed successfully!\n\n👉  Configuration Details:\n    Storage method: $(gum style --foreground 212 \"$storage_method\")\n    GitHub CLI: $wrapper_status\n\n👉  You can now use these and other GitHub CLI commands:\n    $(gum style --foreground 212 'gh repo create')      Create a new repository\n    $(gum style --foreground 212 'gh pr list')          List pull requests\n    $(gum style --foreground 212 'gh issue view')       View issue details\n\nYour token is securely stored and will be automatically used for GitHub authentication.\"\n\n    echo \"\"\n}\n\n# main setup function\nsetup_github_integration() {\n    # exit the shell if user opts not to continue\n    exit_shell() {\n        echo \"Exiting the shell. Please run 'flox activate' to restart the wizard.\"\n        exit 1\n    }\n    \n    # check for existing token\n    if check_existing_token; then\n        return 0\n    fi\n    \n    # github token setup wizard\n    clear\n    show_welcome_message\n    \n    # prompt to continue with the setup wizard\n    if ! gum confirm \"Do you want to continue?\" --default=true; then\n        exit_shell\n    fi\n    \n    echo \"Type 'exit' or 'quit' at any prompt to exit the wizard.\"\n    \n    term_width=$(tput cols)\n    if [[ $term_width -gt 70 ]]; then\n        term_width=70\n    fi\n    \n    # check for skip command\n    check_skip() {\n        if [[ \"$1\" == \"exit\" || \"$1\" == \"quit\" ]]; then\n            echo \"Skipping the wizard. You can run 'flox activate' again to restart.\"\n            return 1\n        fi\n        return 0\n    }\n    \n    # display token creation instructions\n    show_token_instructions\n    \n    # collect github token\n    local github_token=\"\"\n    while true; do\n        github_token=$(gum input --prompt \"Enter your GitHub Personal Access Token: \" --password --width \"$term_width\")\n        \n        if ! check_skip \"$github_token\"; then\n            return 1\n        fi\n        \n        if [[ -z \"$github_token\" ]]; then\n            echo \"Token cannot be empty. Please try again.\"\n            continue\n        fi\n        \n        echo \"Validating token...\"\n        if validate_github_token \"$github_token\"; then\n            echo \"Token validation successful!\"\n            break\n        else\n            echo \"Invalid token. Please check and try again.\"\n        fi\n    done\n    \n    # try to store in system keyring first\n    echo \"Attempting to store token in system keyring...\"\n    if store_github_token \"$github_token\"; then\n        # source config to get NEEDS_WRAPPER\n        source \"$CONFIG_FILE\"\n        \n        if [[ \"$NEEDS_WRAPPER\" == \"true\" ]]; then\n            # remove any existing gh auth\n            gh auth logout --hostname github.com 2>/dev/null || true\n            \n            # create shell wrappers\n            echo \"Creating shell wrappers...\"\n            create_shell_wrappers\n            \n            show_completion_message \"system keyring\" \"true\"\n        else\n            # No wrapper needed, make sure we don't have any leftover wrapper files\n            rm -f \"$BASH_WRAPPER\" \"$ZSH_WRAPPER\" \"$FISH_WRAPPER\" 2>/dev/null || true\n            \n            show_completion_message \"system keyring\" \"false\"\n        fi\n        return 0\n    else\n        # fallback to encrypted file if keyring fails\n        echo \"Unable to use system keyring/keychain.\"\n        \n        if gum confirm \"Do you want to store your GitHub token in an encrypted local file?\" --default=true; then\n            echo \"Storing token in encrypted file...\"\n            store_github_token_encrypted \"$github_token\"\n            \n            # remove any existing gh auth\n            gh auth logout --hostname github.com 2>/dev/null || true\n            \n            # create shell wrappers\n            echo \"Creating shell wrappers...\"\n            create_shell_wrappers\n            \n            show_completion_message \"encrypted file\" \"true\"\n            return 0\n        else\n            echo \"No storage method selected. GitHub integration setup cancelled.\"\n            exit_shell\n        fi\n    fi\n}\n\n# create cache directory if it doesn't exist\nmkdir -p \"$(dirname \"$CONFIG_FILE\")\"\n\n# call the main setup function\nsetup_github_integration\n"
    },
    "profile": {
      "bash": "source \"${FLOX_ENV_CACHE:-$HOME/.cache/flox}/gh_wrapper.bash\"\n"
    },
    "options": {
      "systems": [
        "aarch64-darwin",
        "aarch64-linux",
        "x86_64-darwin",
        "x86_64-linux"
      ],
      "allow": {
        "licenses": []
      },
      "semver": {}
    }
  },
  "packages": [
    {
      "attr_path": "bat",
      "broken": false,
      "derivation": "/nix/store/q90c05si2n0czkdk4qw3s23vqsbfc11s-bat-0.25.0.drv",
      "description": "Cat(1) clone with syntax highlighting and Git integration",
      "install_id": "bat",
      "license": "[ Apache-2.0, MIT ]",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "bat-0.25.0",
      "pname": "bat",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:09:44.326Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.25.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/ai2vv20xlpmnn5q7f01pw9nyna7104bl-bat-0.25.0"
      },
      "system": "aarch64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "bat",
      "broken": false,
      "derivation": "/nix/store/7xl05mcnj375b14ygrj4c598pd7siqp7-bat-0.25.0.drv",
      "description": "Cat(1) clone with syntax highlighting and Git integration",
      "install_id": "bat",
      "license": "[ Apache-2.0, MIT ]",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "bat-0.25.0",
      "pname": "bat",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:28:04.129468Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.25.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/ypvcjk8hznpb56azpjd6jm8a9jv7fp7g-bat-0.25.0"
      },
      "system": "aarch64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "bat",
      "broken": false,
      "derivation": "/nix/store/j42xsxrgggr2vqxqv0aqs75czimqzvff-bat-0.25.0.drv",
      "description": "Cat(1) clone with syntax highlighting and Git integration",
      "install_id": "bat",
      "license": "[ Apache-2.0, MIT ]",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "bat-0.25.0",
      "pname": "bat",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:44:38.199237Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.25.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/yixxzkspjsfrh88nykmzy9vfg6zcwjqc-bat-0.25.0"
      },
      "system": "x86_64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "bat",
      "broken": false,
      "derivation": "/nix/store/xr4xawjnfc980k521f8hiy67bxmb1v07-bat-0.25.0.drv",
      "description": "Cat(1) clone with syntax highlighting and Git integration",
      "install_id": "bat",
      "license": "[ Apache-2.0, MIT ]",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "bat-0.25.0",
      "pname": "bat",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T02:04:09.835002Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.25.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/vf5hbnpkw8yy7q56kba8hl9cm25143cq-bat-0.25.0"
      },
      "system": "x86_64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "curl",
      "broken": false,
      "derivation": "/nix/store/pgvbsfq3h5143bvdlhwm73dfniqqdykf-curl-8.12.1.drv",
      "description": "Command line tool for transferring files with URL syntax",
      "install_id": "curl",
      "license": "curl",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "curl-8.12.1",
      "pname": "curl",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:09:44.541824Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "8.12.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/baiigsw3z45r6flc0sp3yfn2miy287cf-curl-8.12.1-bin",
        "dev": "/nix/store/6105r6dknsdcv1bg2p7lclm7hp6vdcvi-curl-8.12.1-dev",
        "devdoc": "/nix/store/zzr5ncacmpzxvh1vrh74iri5w630z23c-curl-8.12.1-devdoc",
        "man": "/nix/store/rcjd846pvsdd4wkancjcnkjx29mxp9cj-curl-8.12.1-man",
        "out": "/nix/store/j97v5hphlqwlifqhyipw7jj32a9fkhmp-curl-8.12.1"
      },
      "system": "aarch64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "curl",
      "broken": false,
      "derivation": "/nix/store/5hk16qr9w26k7382jm2iwjszjbbqv0k6-curl-8.12.1.drv",
      "description": "Command line tool for transferring files with URL syntax",
      "install_id": "curl",
      "license": "curl",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "curl-8.12.1",
      "pname": "curl",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:28:04.492782Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "8.12.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/mky4ls4yyinks01394shqhk6alhn9xh6-curl-8.12.1-bin",
        "debug": "/nix/store/0mn2mfyqjb3ybrp8sx1m0wadbvsl02z4-curl-8.12.1-debug",
        "dev": "/nix/store/75li6f1pfd8w00ilffaqywpgn910z88l-curl-8.12.1-dev",
        "devdoc": "/nix/store/mp9ny9x3608fbf3zcq8rqlc6lxhxjj49-curl-8.12.1-devdoc",
        "man": "/nix/store/m18cmv4nl58giw3zalrlldw40ksil6kr-curl-8.12.1-man",
        "out": "/nix/store/y1f35w8psglsf3scfwwr58mv4ai2j8p0-curl-8.12.1"
      },
      "system": "aarch64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "curl",
      "broken": false,
      "derivation": "/nix/store/qcxc9gqd371yy2b6vdgci0z6s3ms8p6a-curl-8.12.1.drv",
      "description": "Command line tool for transferring files with URL syntax",
      "install_id": "curl",
      "license": "curl",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "curl-8.12.1",
      "pname": "curl",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:44:38.404911Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "8.12.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/0r4yc6516kqylzccq9f35gni14hlpa3x-curl-8.12.1-bin",
        "dev": "/nix/store/ylr090jisy6rcp6h7gz4j5s79xdga61y-curl-8.12.1-dev",
        "devdoc": "/nix/store/dmmqlds05glry24fppkgnd6mkgbv13fx-curl-8.12.1-devdoc",
        "man": "/nix/store/ahx6ha7fr19g4km7ckwg8m18bzrszccn-curl-8.12.1-man",
        "out": "/nix/store/p2xnwb804lsv8azrkqrvs4ng7ivbaqmd-curl-8.12.1"
      },
      "system": "x86_64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "curl",
      "broken": false,
      "derivation": "/nix/store/258sxbzbxpgzgvy6pbr30akcx5l9m49i-curl-8.12.1.drv",
      "description": "Command line tool for transferring files with URL syntax",
      "install_id": "curl",
      "license": "curl",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "curl-8.12.1",
      "pname": "curl",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T02:04:10.200756Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "8.12.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/ipyzblpplw889rdvmm7sw8r3kf24p6c2-curl-8.12.1-bin",
        "debug": "/nix/store/c8dh5156hf1ikfnhihiiv97bj67fzkh0-curl-8.12.1-debug",
        "dev": "/nix/store/adpdg2yhykxgm13r8nj9xqbj676vxv3n-curl-8.12.1-dev",
        "devdoc": "/nix/store/m1kmbias4l6g6w5jifc0q1wc2sn7hj7c-curl-8.12.1-devdoc",
        "man": "/nix/store/kf2jk2p8bf3lvasxy5pmib6irgs28rl2-curl-8.12.1-man",
        "out": "/nix/store/xbxq9d2npfdb6954wdc5aa7skf2bpdxs-curl-8.12.1"
      },
      "system": "x86_64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "gh",
      "broken": false,
      "derivation": "/nix/store/phav4p4vyw976n24sw5xmwf2vcczchfb-gh-2.68.1.drv",
      "description": "GitHub CLI tool",
      "install_id": "gh",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "gh-2.68.1",
      "pname": "gh",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:09:44.865134Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "2.68.1",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/qbam4w81gg5fvs4dh02mlqbvk9ycgdrn-gh-2.68.1"
      },
      "system": "aarch64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "gh",
      "broken": false,
      "derivation": "/nix/store/lrgw68p4xv0wkkp93af93b805i65j2rc-gh-2.68.1.drv",
      "description": "GitHub CLI tool",
      "install_id": "gh",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "gh-2.68.1",
      "pname": "gh",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:28:05.102489Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "2.68.1",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/y54l6mdjb6dfjgc3144ycdi2ahmjaiba-gh-2.68.1"
      },
      "system": "aarch64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "gh",
      "broken": false,
      "derivation": "/nix/store/391q642n3vqrw9i4a9cxh3kmll2ckdg9-gh-2.68.1.drv",
      "description": "GitHub CLI tool",
      "install_id": "gh",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "gh-2.68.1",
      "pname": "gh",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:44:38.733949Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "2.68.1",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/r1qmxbxn6ila24ahh94w0h3f07dkjpsn-gh-2.68.1"
      },
      "system": "x86_64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "gh",
      "broken": false,
      "derivation": "/nix/store/lw8ah6df003p3paik6yl3zzi9rarccij-gh-2.68.1.drv",
      "description": "GitHub CLI tool",
      "install_id": "gh",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "gh-2.68.1",
      "pname": "gh",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T02:04:10.878797Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "2.68.1",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/xnx0zdzqyrl07hslrf0r6dc95rvi1sb8-gh-2.68.1"
      },
      "system": "x86_64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "git",
      "broken": false,
      "derivation": "/nix/store/7nw7ws2sawvjmzpcaxwhi4wy3i3krh2v-git-2.48.1.drv",
      "description": "Distributed version control system",
      "install_id": "git",
      "license": "GPL-2.0",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "git-2.48.1",
      "pname": "git",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:09:44.883262Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "2.48.1",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "doc": "/nix/store/086knqdw7fjgzczp0i6nad95s2v6jbya-git-2.48.1-doc",
        "out": "/nix/store/b3sci30zzzlj3rzj1y89cijnd6zcwapk-git-2.48.1"
      },
      "system": "aarch64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "git",
      "broken": false,
      "derivation": "/nix/store/v533yd3c1phs4ygvw7jxydgs0hacw4w7-git-2.48.1.drv",
      "description": "Distributed version control system",
      "install_id": "git",
      "license": "GPL-2.0",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "git-2.48.1",
      "pname": "git",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:28:05.128774Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "2.48.1",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "debug": "/nix/store/ch1rjq8rbjm2ipbxa2i5cpdc5c0raih6-git-2.48.1-debug",
        "doc": "/nix/store/3v7g1zdv24mziy2m4xymi0a9fwd8h8c9-git-2.48.1-doc",
        "out": "/nix/store/gzamqis9d24214c2br9g7vxqzgh309l4-git-2.48.1"
      },
      "system": "aarch64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "git",
      "broken": false,
      "derivation": "/nix/store/q4nn9vcs5b9nh9yabh1vg2wwa473rl1b-git-2.48.1.drv",
      "description": "Distributed version control system",
      "install_id": "git",
      "license": "GPL-2.0",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "git-2.48.1",
      "pname": "git",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:44:38.752942Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "2.48.1",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "doc": "/nix/store/x5x4qz04v9zfz9dzh8l723nbwma8dnmk-git-2.48.1-doc",
        "out": "/nix/store/5qmpmgx1fb1qxnq3gb1hvvha5wi24n7v-git-2.48.1"
      },
      "system": "x86_64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "git",
      "broken": false,
      "derivation": "/nix/store/c33kc0kbjbmr88l57sni11zgx6cjz01w-git-2.48.1.drv",
      "description": "Distributed version control system",
      "install_id": "git",
      "license": "GPL-2.0",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "git-2.48.1",
      "pname": "git",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T02:04:10.907467Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "2.48.1",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "debug": "/nix/store/s0a07h6m6lpcv67954y3vag35np716sf-git-2.48.1-debug",
        "doc": "/nix/store/fkrfnnwc7a7rq86rrnb9j2474wy8qkbm-git-2.48.1-doc",
        "out": "/nix/store/pl9krbxnhawd4n5kxsm6m5i5mjhbw48q-git-2.48.1"
      },
      "system": "x86_64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "gum",
      "broken": false,
      "derivation": "/nix/store/rs3gh60pcnvw9gfmgflinhqmyl8klwp5-gum-0.16.0.drv",
      "description": "Tasty Bubble Gum for your shell",
      "install_id": "gum",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "gum-0.16.0",
      "pname": "gum",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:09:45.087690Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.16.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/kwkfj9ifihlfzv7damvf0x42w1l904ld-gum-0.16.0"
      },
      "system": "aarch64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "gum",
      "broken": false,
      "derivation": "/nix/store/rfdkq3mnxjbn28fr3w9a8wlb6id80lpy-gum-0.16.0.drv",
      "description": "Tasty Bubble Gum for your shell",
      "install_id": "gum",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "gum-0.16.0",
      "pname": "gum",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:28:05.764040Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.16.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/fflgnfjyizrfp3kb9kg1rb13zh8iqgpa-gum-0.16.0"
      },
      "system": "aarch64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "gum",
      "broken": false,
      "derivation": "/nix/store/lqp6sr5qq6zd802sfxrkb9m9jd63ymrz-gum-0.16.0.drv",
      "description": "Tasty Bubble Gum for your shell",
      "install_id": "gum",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "gum-0.16.0",
      "pname": "gum",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:44:38.963224Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.16.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/854g6bmylzpaz7s1xdccfq9x2xkx6fcc-gum-0.16.0"
      },
      "system": "x86_64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "gum",
      "broken": false,
      "derivation": "/nix/store/24a1pj733gimjh92rd6biprlpql2fdaa-gum-0.16.0.drv",
      "description": "Tasty Bubble Gum for your shell",
      "install_id": "gum",
      "license": "MIT",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "gum-0.16.0",
      "pname": "gum",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T02:04:11.534944Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "0.16.0",
      "outputs_to_install": [
        "out"
      ],
      "outputs": {
        "out": "/nix/store/hn1dl52063dlljmzjlx0cw1f59yk5r2n-gum-0.16.0"
      },
      "system": "x86_64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "openssl",
      "broken": false,
      "derivation": "/nix/store/dfr5msix3yzz344v3cdccp4kvfw7d8x4-openssl-3.4.1.drv",
      "description": "Cryptographic library that implements the SSL and TLS protocols",
      "install_id": "openssl",
      "license": "Apache-2.0",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "openssl-3.4.1",
      "pname": "openssl",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:09:47.697852Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "3.4.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/3vww53wl93ykrzfpwiyh3qxkrq4csnws-openssl-3.4.1-bin",
        "dev": "/nix/store/p5kl6l6yx56m1p3ngnrahb3s6sq2qqmj-openssl-3.4.1-dev",
        "doc": "/nix/store/dhb33vzk1j5r8843747zgwpbsnbqky5r-openssl-3.4.1-doc",
        "man": "/nix/store/ijl4khdrf2vfn6njjdp1mr4xmvgccwdx-openssl-3.4.1-man",
        "out": "/nix/store/632hkjxqm9877a1l1fvbjw00hp5z9srw-openssl-3.4.1"
      },
      "system": "aarch64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "openssl",
      "broken": false,
      "derivation": "/nix/store/8xjjs6p2agpclayj3h4hv3k7bp4w8g2h-openssl-3.4.1.drv",
      "description": "Cryptographic library that implements the SSL and TLS protocols",
      "install_id": "openssl",
      "license": "Apache-2.0",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "openssl-3.4.1",
      "pname": "openssl",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:28:15.637226Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "3.4.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/37qzbvcm4chvjkxa2bnzw49pvsmg5rbz-openssl-3.4.1-bin",
        "debug": "/nix/store/460k0bdwz3hl8yw029xq2i04gvp5jg7x-openssl-3.4.1-debug",
        "dev": "/nix/store/w767vxkkxk0a6w4q686rpa2jyrk7jwhh-openssl-3.4.1-dev",
        "doc": "/nix/store/28n6x9fm46xw85z1s054cbz1s7zvdjjh-openssl-3.4.1-doc",
        "man": "/nix/store/x7wxcgxgjkxz916rhyc69hq73ln036ic-openssl-3.4.1-man",
        "out": "/nix/store/8qvch536iwkzgbfi9zp62qd3hhbp3y44-openssl-3.4.1"
      },
      "system": "aarch64-linux",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "openssl",
      "broken": false,
      "derivation": "/nix/store/746y2jgwgcn8sch9j5ixq0vlgi06q2h8-openssl-3.4.1.drv",
      "description": "Cryptographic library that implements the SSL and TLS protocols",
      "install_id": "openssl",
      "license": "Apache-2.0",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "openssl-3.4.1",
      "pname": "openssl",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T01:44:41.640122Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "3.4.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/8l7820d6x46w5x4c9rlmkl3w2fyg8x8x-openssl-3.4.1-bin",
        "dev": "/nix/store/0v17cghlz8kqv1mgbslbcnfzbvryfxlb-openssl-3.4.1-dev",
        "doc": "/nix/store/l1qrx626psi8nblpi4spmm2ix9vnz297-openssl-3.4.1-doc",
        "man": "/nix/store/xxmr1pzq3ggrd4q5pwbvskh656r4ib05-openssl-3.4.1-man",
        "out": "/nix/store/1mcrp132pjnfcmdvm1hb2sdvfl3yl2vx-openssl-3.4.1"
      },
      "system": "x86_64-darwin",
      "group": "toplevel",
      "priority": 5
    },
    {
      "attr_path": "openssl",
      "broken": false,
      "derivation": "/nix/store/g6y4w8h8356bx9wphp187pvby4rdr8ar-openssl-3.4.1.drv",
      "description": "Cryptographic library that implements the SSL and TLS protocols",
      "install_id": "openssl",
      "license": "Apache-2.0",
      "locked_url": "https://github.com/flox/nixpkgs?rev=b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "name": "openssl-3.4.1",
      "pname": "openssl",
      "rev": "b6eaf97c6960d97350c584de1b6dcff03c9daf42",
      "rev_count": 769969,
      "rev_date": "2025-03-18T09:06:34Z",
      "scrape_date": "2025-03-20T02:04:23.230781Z",
      "stabilities": [
        "unstable"
      ],
      "unfree": false,
      "version": "3.4.1",
      "outputs_to_install": [
        "bin",
        "man"
      ],
      "outputs": {
        "bin": "/nix/store/nc9zks4mdn9bkpmhkgvn02xbm965fcd6-openssl-3.4.1-bin",
        "debug": "/nix/store/k4l54afpk14dwk61xm6hpa8gmc6yafwk-openssl-3.4.1-debug",
        "dev": "/nix/store/9lq31bk3niis5sfaaqxw8z9rxnh0x3fj-openssl-3.4.1-dev",
        "doc": "/nix/store/4j9l1ry4byrd71j79c86vk3spmwv1ass-openssl-3.4.1-doc",
        "man": "/nix/store/y6bmrdlnyhafsa4xmq57zs5am3d1dag6-openssl-3.4.1-man",
        "out": "/nix/store/99cizfcv53x3mjb15cx7kmdxsglp17hc-openssl-3.4.1"
      },
      "system": "x86_64-linux",
      "group": "toplevel",
      "priority": 5
    }
  ]
}